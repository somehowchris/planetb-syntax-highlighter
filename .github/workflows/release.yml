name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4.1.1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install tools
        run: |
          wget -qO- https://github.com/thedodd/trunk/releases/latest/download/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
          rustup target add wasm32-unknown-unknown
          sudo wget -O /usr/local/bin/minify https://wilsonl.in/minify-html/bin/0.8.0-linux-x86_64
          sudo chmod +x /usr/local/bin/minify
      - name: Build
        run: ./trunk build --release
      - name: Upload app artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-folder
          path: dist
  container:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      deployments: write
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Process version of the tag
        id: version
        uses: ncipollo/semantic-version-action@v1

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          environment: ghcr

      - name: Update deployment status (pending)
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          state: "pending"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
       # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@a5d81fb6bdbcbb3d239e864d6552820420254494
      
      # Login against a container registry
      - name: Log into registry ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Download built app
        uses: actions/download-artifact@v3
        with:
          name: dist-folder
          path: dist/

      - name: Update deployment status (in_progress)
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          state: "in_progress"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Buildah Action
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            Containerfile
          platforms: linux/amd64,linux/arm64
          image: ghcr.io/${{ github.repository }}
          tags: ${{ steps.version.outputs.tag }}

      - name: Push container image
        id: push-container-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          registry: ghcr.io
          tags: ${{ steps.build-image.outputs.tags }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
          
        # Sign the resulting Docker image digest except on PRs.
        # This will only write to the public Rekor transparency log when the Docker
        # repository is public to avoid leaking data.  If you would like to publish
        # transparency data even for private images, pass --force to cosign below.
        # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: 1
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ghcr.io/${{ github.repository }}@${{ steps.push-container-image.outputs.digest }}


      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://github.com/${{github.repository}}/packages
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://github.com/${{github.repository}}/packages
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  github-pages:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Download built app
        uses: actions/download-artifact@v3
        with:
          name: dist-folder
          path: dist/
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.4.3
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: dist # The folder the action should deploy.
          clean: true
